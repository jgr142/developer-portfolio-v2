{
  "name": "Joshua Gisiger",
  "logo_name": "joshua-gisiger",
  "role": "Software Engineer",
  "about": {
    "sections": {
      "personal-info": {
        "title": "personal-info",
        "icon": "icons/info-personal.svg",
        "info": {
          "bio": {
            "title": "bio",
            "files": {
              "bio": {
                "id": "1",
                "description": "<br> Hi Y'all, my name is Joshua Emiliano Nicolas Romo Gisiger Gonzalez. Yes... that's my full legal name. I was born and raised in Switzerland in a Mexican family, and moved to New York City at age 11 without knowing a word of English. <br><br> I'm now pursuing a B.S. in Computer Science with a Data Science minor at Rice University, and could not have been more grateful for every moment that has brought me to this point in my life. <br><br> I am deeply interested in the disruptions AI is causing and in building the systems and models that make AI so powerful and beneficial to humanity. Because with great power comes great responsibility."
              }
            }
          },
          "education": {
            "title": "education",
            "files": {
              "university": {
                "id": "1",
                "description": "<br>I am pursuing a B.S. in Computer Science with a minor in Data Science at Rice University.<br><br>I have a 3.87 GPA and have been repeatedly recognized on the President's Honor Roll for academic excellence.<br><br> My relevant coursework include: Intro to Computer Systems, Concurrent Program Design, Intro to Computer Vision, Tools & Models for Data Science, Linear Algebra, Probability & Statistics, Computer Ethics, (and more).<br><br>I currently serve as Vice President of Tech Solutions for ACT Rice, and previously led a 38-person team as System Architect on a product delivery for SLB. I also served as RHA lead for my residential college (McMurtry) and volunteer as an ESL tutor for Rice Housing and Dining staff."
              }
            }
          }
        }
      },
      "professional-info": {
        "title": "professional-info",
        "icon": "icons/info-professional.svg",
        "info": {
          "experience": {
            "title": "experience",
            "files": {
              "experience": {
                "id": "1",
                "description": "<br>Over my career in computer science, I've developed a strong foundation in software engineering through hands-on experience across industries such as artificial intelligence, finance, and medical technology. I've worked in both startup and corporate environments, contributing to projects involving AI tooling, large-scale systems integration, and real-time data processing.<br><br>My work spans full-stack development, machine learning, and system design, often in fast-paced, high-impact settings. I’m comfortable navigating complex codebases, collaborating across teams, and quickly adapting to new technologies. Across every role, I focus on building reliable, efficient, and meaningful solutions that drive real-world value."
              },
              "dust": {
                "id": "2",
                "year": "2025",
                "title": "Dust",
                "description": "Embedded in an agile development team at an early-stage AI startup focused on productivity tools powered by LLMs. Authored 45+ merged PRs in a fast-paced AI startup environment, contributing to developer tooling, security enhancements, platform refactors, customer-reported errors, and performance/stability improvements across Dust's production codebase. Designed and built a Claude Code like CLI with an appealing UI for our client-facing platform, which when started created a client-side MCP server, supporting file read/edit operations, concurrent file handling, content and filename search (glob/grep), and shell command execution. Spearheaded delivery of a contract-critical integration for an external partner, coordinating directly with stakeholders and owning implementation. Researched and resolved security vulnerabilities, including prompt injection risks and unsafe image rendering paths. Debugged production issues and implemented several utility features to enhance team workflows and code maintainability."
              },
              "libermax-capital": {
                "id": "3",
                "year": "2024",
                "title": "Libermax Capital",
                "description": "Researched various LLMs, embedding models, and frameworks to design a Retrieval-Augmented Generation (RAG) system for the hedge fund. Implemented a fully local RAG system, enabling secure and private document query handling with LLM responses. Restructured the data flow and processing steps in programs using Spacy's NLP and other modules to support multiprocessing, allowing us to train 5 models simultaneously instead of one, thereby making the training process up to 5 times faster without any loss in quality. Debugged existing code using dynamic programming, modular programming, algorithm optimization, and other techniques. Improved efficiency and corrected semantics in existing code. Developed short, on-the-spot programs for quick and clean data retrieval."
              },
              "brainlab": {
                "id": "4",
                "year": "2023",
                "title": "Brainlab",
                "description": "Worked with TensorFlow API and YOLO to create object detection models using a wide range of pre-trained models to measure and compare which model worked best with our dataset. Trained an object detection model with a mAP near 90% and an average inference time of around 20 milliseconds. Actively learned new technologies, tools, and practices in the medical technology industry. This included but was not limited to Brainlab's Kick 2 and Image Viewer as well as Magic Leap's Magic Leap 1 and Magic Leap 2. Contributed to software development efforts through coding, debugging, and testing. Collaborated with cross-functional teams including developers, designers, and product managers."
              }
            }
          }
        }
      },
      "hobbies-info": {
        "title": "hobbies-info",
        "icon": "icons/info-hobbies.svg",
        "info": {
          "tech-curiosity": {
            "title": "tech-curiosity",
            "files": {
              "tech-curiosity": {
                "id": 1,
                "description": "<br>I like to consume cool knowledge and stories around tech.<br><br>This is going to sound super weird and fake, but I really like reading about design patterns and code structure.<br><br>Learning what ways of thinking are appropriate to what types of problems, and how to shift one's approach to a certain mindset.<br><br>There's nothing that brings me quite as much peace as an elegant solution to a difficult problem.<br><br>I've read classics like the Gang of Four's <em>Design Patterns</em> and Uncle Bob's, now controversial, <em>Clean Code</em> and <em>Clean Architecture</em>.<br><br>I also love reading about the history of technology and its consequential developments.<br><br>Current favorites are <em>Deep Future</em> by Pablos Holman and <em>The Innovators</em> by Walter Isaacson.",
                "images": [
                  {
                    "title": "Design Patterns",
                    "src": "/images/hobbies/design-patterns.jpg"
                  },
                  {
                    "title": "The Innovators",
                    "src": "/images/hobbies/the-innovators.png"
                  }
                ]
              }
            }
          },
          "art-history": {
            "title": "art-history",
            "files": {
              "art-history": {
                "id": "1",
                "description": "<br>I’m a computer scientist at heart, but I’ve found a real passion for art history during my time at university. I’m especially fascinated by the dramatic shift from the detailed realism and grandeur of historical art between the 1500s and 1800s to the more experimental, abstract, and conceptually driven movements of the 1850s to the mid-20th century. I’ve taken several courses, including ones on Global Modernism, exploring how art and architecture across continents reflect tensions between tradition and modernity, and the Baroque Masters, including Rembrandt, Caravaggio, Velázquez, and others. What draws me in is how visual language evolves to reflect broader cultural and philosophical changes—how meaning can be expressed with as much power in abstraction as in realism.<br><br>Whether it's studying a Rembrandt chiaroscuro or the visual fragmentation of modernist architecture, art history gives me a different lens for thinking about structure, symbolism, and creativity.",
                "images": [
                  {
                    "title": "Consequences of War (Peter Paul Rubens)",
                    "src": "/images/hobbies/consequences-of-war.jpg",
                    "wide": true
                  },
                  {
                    "title": "Guernica (Pablo Picasso)",
                    "src": "/images/hobbies/guernica.jpg",
                    "wide": true
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "contacts": {
    "direct": {
      "title": "contacts",
      "sources": {
        "email": "j.r.gisiger@gmail.com",
        "phone": "+1 (929) 386 8521"
      }
    },
    "social": {
      "github": {
        "title": "Github profile",
        "url": "https://github.com/",
        "user": "jgr142"
      },
      "linkedin": {
        "title": "Linkedin profile",
        "url": "https://linkedin.com/in/",
        "user": "joshuagisiger"
      }
    }
  },
  "gists": {
    "1": "83861a67e377633ee8368df01ee3a355",
    "2": "694c1f32332788a2ac7f37b09e5aa40e"
  },
  "projects": {
    "1": {
      "id": "owldb",
      "title": "_owldb",
      "description": "A RESTful NoSQL document database in Go featuring JSON schema validation, hierarchical document storage, real-time subscriptions with server-sent events, and basic token-based authentication and atomic operations.",
      "img": "/images/projects/owldb.png",
      "tech": ["GoLang"],
      "url": "https://github.com/"
    },
    "2": {
      "id": "m3ssag1n8",
      "title": "_m3ssag1n8",
      "description": "A real-time, web-based messaging app in TypeScript featuring user login, hierarchical workspaces and channels, rich markdown-style post formatting, emoji reactions, and live updates via server-sent events.",
      "img": "/images/projects/m3ssag1n8.png",
      "tech": ["HTML", "CSS", "JavaScript"],
      "url": "https://github.com/"
    },
    "3": {
      "id": "golem",
      "title": "_golem",
      "description": "An interpreter written fully in golang. Compiler soon to come.",
      "img": "/images/projects/golem.webp",
      "tech": ["GoLang"],
      "url": "https://github.com/"
    },
    "4": {
      "id": "goserve",
      "title": "_goserve",
      "description": "A secure and maintainable snippet-sharing web application in Go, implementing session-based authentication, HTML templating, and MySQL integration",
      "img": "/images/projects/goserve.webp",
      "tech": ["GoLang", "HTML", "CSS"],
      "url": ""
    },
    "5": {
      "id": "feat",
      "title": "_feat",
      "description": "A large-scale Java application that automatically generates concise black-box test suites for Python functions using data-driven analysis of buggy student implementations to support formative and summative feedback in programming education.",
      "img": "/images/projects/feat.webp",
      "tech": ["Java"],
      "url": "https://github.com/"
    },
    "6": {
      "id": "malloc",
      "title": "_malloc",
      "description": "A dynamic memory allocator in C that implements custom versions of malloc, free, and realloc using implicit free lists, first-fit placement, boundary-tag coalescing, and a consistency-checking heap validator.",
      "img": "/images/projects/malloc.webp",
      "tech": ["C"],
      "url": "https://github.com/"
    },
    "7": {
      "id": "shell",
      "title": "_shell",
      "description": "A Unix shell implemented in C that supports job control, foreground and background execution, custom built-in commands (jobs, fg, bg, quit), signal handling (SIGINT, SIGTSTP, SIGCHLD), and process management using fork, execve, and waitpid.",
      "img": "/images/projects/shell.webp",
      "tech": ["C"],
      "url": "https://github.com/"
    },
    "9": {
      "id": "zeno",
      "title": "_zeno",
      "description": "terminal based project helper.",
      "img": "/images/projects/zeno.webp",
      "tech": ["GoLang"],
      "url": "https://github.com/"
    }
  }
}
